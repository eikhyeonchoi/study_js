/**
 * ㅡㅡ핵심키워드
 * 변수, 식별자, 메모리, 호이스팅, GB, 카멜케이스
 * 
 * ㅡㅡ개요
 * 예를들어 
 * js 엔진에서 10 + 20을 계산해야한다고 가정하면
 * (10 + 20)이라는 표현식을 리터럴과 연산자로 구분지어 코드를 평가할 수 있어야한다
 * 그럼 엔진은 10, 20을 메모리(셀)에 기억함
 * 각 셀은 주소를 갖음(위치) 
 * 즉, 변수란 값의 위치를 가리키는 상징적인 이름(= 메모리 주소, = 식별자)
 */

//  이 간단한 코드도 10, 20, 30이 각기 다른 셀에 저장됨
var result = 10 + 20;

// 용어: 변수선언
// 기본적으로 선언하면 엔진은 undefined로 초기화한다(암묵적으로할당됨)
// 즉 선언 -> 초기화 단계를거침
// + 모든 변수(식별자)는 실행컨텍스트에 저장됨
// 선언하지 않은 변수를 사용하려하면 ReferenceError발생함
var score;

// 용어: 호이스팅
// 선언하지 않은 변수를 사용했는데 ReferenceError가 발생안하고 왜 undefined가 발생하는걸까?
// 엔진은 소스코드를 평가->실행한다
// 이 평가단계일때 모든 선언문(변수,함수선언등)을 찾아내 먼저 수행함
// 평가단계가 끝난 후 선언문이 아닌 코드를 수행하기 때문에
// var a; 선 수행되고 그 후 console이 수행되기 때문에 ReferenceError가 발생하지 않는것
console.log(a); // undefined
var a;

// 이 한줄도 선언은 평가때 수행되고 할당은 런타임(실행)때 수행됨
var b = 20;

// 재할당하더라도 메모리셀은 기존메모리셀을 10->20바꾸는게아닌
// 10, 20 각각 다른 셀에 저장된다
// 그럼 재할당됬으니 10은 사용하지 않을텐데 메모리낭비가 발생할 수 있음
// 그건 GarbageCollector가 알아서 해줌
var a = 10;
a = 20;

// 카멜케이스를 사용하자
var totalScore;