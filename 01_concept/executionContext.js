/**
 * ㅡㅡ핵심키워드
 * 실행컨텍스트, 실행컨텍스트스택, 렉시컬환경, 환경레코드, 외부렉시컬환경참조, 객체환경레코드, 선언환경레코드, 블록레벨스코프, 스코프체인, [[Environment]]
 * 
 * 
 * ㅡㅡ개요
 * 엔진은 소스코드를 2개의 과정 평가, 실행 과정으로 나누는데,
 * 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문만 먼저 실행해
 * 변수나 함수 식별자를 키로 스코프(렉시컬 환경의 환경 레코드)에 등록
 * 평가과정이 끝나면 선언문을 제외한 소스코드가 순차적으로 실행(런타임)
 */

// 1. 모든식별자를 스코프의 따라 구분해 등록함(전역, 함수 등)
// 2. 스코프는 중첩관계에 의해 스코프 체인을 형성해야함. 체인을 통해 상위스코프 검색이 가능해야함
// 3. 코드의 샐행순서를 변경할 수 있어야하며 되돌아갈 수 있어야함
// 즉 실행컨텍스트란 소스코드를 실행하는 데 필요한 환경을 제공하고 코드의 실행결과를 실제로 관리하는 영역임

{
    // 실행컨텍스트스택
    const x = 1;
    function foo() {
        const y = 2;
        function bar() {
            const z = 3;
            console.log(x+y+z);
        }
        bar();
    }
    foo();
    // 스택모양의 변화
    // 1. 비어있음

    // 2. 전역코드평가와실행
    //    전역실행컨텍스트

    // 3. 함수코드평가와실행(foo)
    //    함수실행컨텍스트(foo)
    //    전역실행컨텍스트

    // 4. 함수코드평가와실행(bar)
    //    함수실행컨텍스트(bar)
    //    함수실행컨텍스트(foo)
    //    전역실행컨텍스트

    // 5. foo함수로 복귀
    //    함수실행컨텍스트(foo)
    //    전역실행컨텍스트

    // 6. 전역함수로복귀
    //    전역실행컨텍스트

    // 7. 비어있음
}

{ // 렉시컬환경
    // 실행컨텍스트의 컴포넌트
    // 식별자와 식별자에 바인딩된 값, 상위스코프에 대한 참조를 기록하는 자료구조
    // 실행컨텍스트는 LexicalCompoenet, VariableComponent 2개로 구성되고
    // 몇가지 상황을 제외한 두 컴포넌트는 동일한 LexicalEnvironment를 참조함
    // LexicalEnvironment?
    // 1. 환경레코드
    //    식별자 및 식별자에 바인딩된 값 을 관리하는 저장소 
    // 2, 외부 렉시컬 환경에 대한 참조
    //    상위스코프 참조 저장

    // 실행과정
    var x = 1;
    const y = 2;
    function foo(a) {
        var x = 3;
        const y = 4;
        function bar(b) {
            const z = 5;
            console.log(a + b + x + y + z);
        }
        bar(10);
    }
    foo(20);

    // 1. 전역객체 생성(window)
    // 2. 전역코드 평가
    //    2-1. 전역 실행 컨텍스트 생성 Global Execution Context
    //    2-2. 전역 렉시컬 환경 생성 Lexical Environment
    //         2-2-1. 전역 환경 레코드 생성 Global Environment Record
    //                2-2-1-1. 객체 환경 레코드 Object Environment Record(window, var ...)
    //                2-2-1-2. 선언적 환경 레코드 Declarative Environment Record(let, const ...)
    //         2-2-2. 외부 렉시컬 환경에 대한 참조결정 Outer Lexical Environment Reference(전역이라 null)
    // 쉽게 말해
    // 1. 실행컨텍스트를 만듬(렉시컬환경)
    // 2. 이 렉시컬환경은 환경레코드와 외부렉시컬환경참조로 나뉨
    //    환경레코드는 식별자 관리를, 외부렉시컬환경참조는 스코프체인(상위스코프 참조값)를 관리함 (함수의 내부슬롯[[Environment]] == 상위스코프정보 == 외부렉시컬환경참조)
    // 3. 환경레코드는 객체 및 선언적 환경 레코드가 있음
    //    객체환경레코드는 전역식별자를 관리함
    //    선언환경레코드는 let, const를 관리함
    // 4. 이게 블록 레벨 스코프라면 블록마다 1,2,3번을 계속 수행하는 것

    // 
    // ...
    // 실행컨텍스트 참조
}



