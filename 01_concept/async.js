/**
 * ㅡㅡ핵심키워드
 * 비동기, 콜스택, 힙, 태스크큐, 이벤루프
 * 
 * ㅡㅡ개요
 */

// js는 단 하나의 실행컨텍스트를 갖는다
// 비동기 처리란 현재 실행중인 태스크가 종료되지 않아도 다음 태스크를 곧 바로 실행하는 것을 비동기 처리라고 한다
// 엔진은 크게 2개의 영역으로 구분할 수 있다
// 1. 콜스택
// 소스코드 평가과정에서 생성된 실행 컨텍스트가 추가되고 제거되는 스택 자료구조
// 함수 호출 시 콜스택에 푸시되어 순차적으로 수행한다 단 하나의 콜스택을 사용하기 때문에 현재 실행중인 실행컨텍스트가
// 콜스택에서 제거되기 전까지는 다른 어떤 태스크도 수행하지 않는다
// 2. 힙
// 객체가 저장되는 메모리 공간이다. 콜스택은 힙에 저장된 객체를 참조함

// 소스코드의 평가와 실행을 제외한 모든 처리는 엔진이 아닌 브라우저가 수행한다
// 예를들어 비동기 방식으로 동작하는 setTimeout의 콜백함수의 평가와 실행은 엔진이 담당하지만
// 호출 스케줄링을 위한 타이머 및 콜백함수의 등록은 브라우저가 한다
// 이를 위해 브라우저 환경은 태스크큐와 이벤트루프를 제공한다
// 1. 태스크큐 
// 비동기 함수의 콜백함수 또는 이벤트핸들러가 일시적으로 보관되는 영역
// 2. 이벤트루프
// 콜스택에 현재 실행중인 태스크가 있는지, 태스크큐에 대기 중인 함수가 있는지 확인함
// 콜스택이 비어있고 태스크큐에 대기중인 함수가 있다면 이벤트루프는 순차적으로 태스크큐에 대기중인 함수를 콜스택으로 이동시킴
// 즉 전역 코드 및 명시적으로 호출된 함수가 모두  종료하면 비로소 콜스택에 푸시되어 실행함
// 브라우저는 멀티쓰레드 방식으로 동작함
// 예를들어 setTimeout의 모든 처리가 엔진에서 된다면 함수 스케줄링을 위한 타이머 설정도 엔진에서 수행될 것이므로
// 대기 시간동안 어떠한 태스크도 수행할 수 없다 즉 비동기 처리가 불가능하다

// 비동기함수는 엔진과 브라우저의 협업이다

 
