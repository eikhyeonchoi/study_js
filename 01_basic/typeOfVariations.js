/**
 * ㅡㅡ핵심키워드
 * let, const, var
 * 
 * ㅡㅡ개요
 * 차이를 알자
 */

{ // var의 문제점
    // 1. 중복선언 허용
    var x = 1;
    var x = 2;

    // 2. 함수레벨 스코프
    //    함수를 제외한 모든 블록 무시
    var x = 1; 
    if(1) {
        var x = 10;
    }
    for(var x=0; x<10; x++) {
    }

    // 3. 호이스팅
    //    이게 물론 에러는 안뜨겠지만
    //    프로그램 흐름 및 가독성에 매우 좋지않아보임
    console.log(foo); // undefined
    var foo;
}

{ // let
    // 1. 동일스코프내 중복 선언 금지
    let a = 1; 
    let a = 2;

    // 2. 블록레벨 스코프가 먹힘(당연히 함수포함)
    // 밑 변수선언의 b는 이 블록스코프내로 한정됨
    let b = 1;

    // 3. var는 선언 및 초기화를 한번에 수행하지만
    //    let은 선언 및 초기화를 각각 수행함
    //    즉 let은 변수를 초기화해야만 사용가능함
    //    초기화 바로이전까지는 참조할 수 없다

    // ()안에 있는 경우에는 참조불가능임
    // (선언 -> 일시적사각지대) -> 초기화단계 -> 할당단계
    // 이게 햇갈릴 수 있는데 호이스팅을 안하는게 아님
    // 런타임 이전 선언단계가 먼저 수행되긴하는데
    // let은 선언만한다고 사용할 수 있는게아니라 초기화해야만 사용가능함
    // 이래서 선언과 초기화가 나눠져있다는 말임
    console.log(bar); // ReferenceError bar is not defined
    
    let bar;
    console.log(bar); // undefined

    bar = 1;
    console.log(bar); // 1
    
    // 호이스팅을 한다는 증거
    // 블록스코프안에 console은 만약 호이스팅을 하지 않는다면 2를 찍음
    // 하지만 스코프내의 let c가 있기 때문에 호이스팅은 하지만 초기화가 안되서
    // 참조 에러 발생하는 것
    let c = 2;
    {
        console.log(c); // error
        let c = 1;
    }

    // 4. 전역객체이 포함되지 않는다
    //    즉 window.* 처럼 사용 불가능하다
}


{ // const(상수)
    // 1. 반드시 선언과 동시에 초기화해야함
    // 2. let과 마찬가지로 블록레벨 스코프
    // 3. 재할당 금지(원시값은 불변이고, 애초에 const는 재할당이 불가능하니 값을 절대 바꿀 수 없다)
    // 4. 객체는 변경가능(재할당을 금하는것이지 원시값이 아닌 객체는 변경가능(프로퍼티))
}

// ES6 이상이라면 var 사용금지
// 재할당할 변수만 let, 나머지 다 const
// 기본적으로 const 쓰고 추 후 재할당할 변수가 있다면 그것을 let으로..